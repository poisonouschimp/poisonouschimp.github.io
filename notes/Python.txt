Python 2 print command is written as- print "Hello"
Python 3 print command is written as- print("Hello")
you can use "" or '' to print string, but you need to use the same open as close. You can combine strings by +

Updating variables:
money_in_wallet = 40
sandwich_price = 7.50
sales_tax = .08 * sandwich_price

sandwich_price += sales_tax
money_in_wallet -= sandwich_price
 In the example the sandwich price of 7.50 is multiplied by 8% to get the sales tax, then the sandwich price and sales tax are added together, then finally the remaining "money in wallet" results from the sandwich price with tax subtracted. 

Comments in Python: Use # This is now comments rather than actual code.

Numbers in Python:
integer- whole number without a decimal point
float- number with decimal point, 1.0, 10., -5.5, 1.5e2 (indicates the power of 10). 
In python 2 when there is a decimal in the result the program rounds down, to fix this you float the number by:
quotient1 = 7./2
# the value of quotient1 is 3.5
quotient2 = 7/2.
# the value of quotient2 is 3.5
quotient3 = 7./2.
# the value of quotient3 is 3.5
quotient1 = float(7)/2 
# the value of quotient1 is 3.5

Multi-line string- use triple quotes """ string """. When a string not assigned as a variable in triple quotes it acts like a multi-line comment. 

boolean- true is a 1 and false is a 0

Python automatically assigns a variable the appropriate datatype based on the value it is given. A variable with the value 7 is an integer, 7. is a float, "7" is a string. 
To convert int to string use str(int value) and for strings to integers use int(string value) or float(string value). 

Strings must be in quotes like name = "Brian", age = "27", food = "chili"

Escape characters: normal punctuation that messes up code. Ex: There's would break the 'There's' string. Instead you have to do 'There\'s' so it punctuates correctly. 

String index: every letter in a string is assigned a number. In "Brian" it would be 0,1,2,3,4 corresponding to 0-B, 1-R, 2-I, 3-A, 4-N. To print out say the 3rd letter you would write "Brian"[2] which would print out I. 

String methods:

len()- gets the length (number of characters of a string)
ex: 
parrot = "Norwegian Blue"
print len(parrot)
output--14 (characters)

lower()- gets rid of all the capitalization in the string.
ex:
"Brian".lower()
output--brian
ex:
parrot = "Norwegian Blue"
print parrot.lower()
norwegian blue

upper()- makes all uppercase
ex:
parrot = "norwegian blue"
print parrot.upper()
NORWEGIAN BLUE

str()- turns non-strings into strings.
ex:
str(2) turns 2 into "2". 

Dot notation- methods that use dot notation only work with strings. 
len(string) and str(object), but "String".upper() for the rest. len() and str() can work on other data types. 

String formatting with %-
The % operator after the string is used to combine a string with variables. The % operator will replace the %s in the string, with the string variable that comes after it. 
Printing a variable that is an integer you can "pad" it with zeros using %02d; 0 means pad with zeros, 2 means to pad to 2 characters wide, the d means the number is a signed integer (+/-). 
ex:
day = 6
print "03 - %s - 2019" %  (day)
# 03 - 6 - 2019
print "03 - %02d - 2019" % (day)
# 03 - 06 - 2019
You need the same number of %s terms in a string as the number of variables in parentheses:

print "The %s who %s %s!" % ("Knights", "say", "Ni")
# This will print "The Knights who say Ni!"

ex:
name = raw_input("What is your name? ")
quest = raw_input("What is your quest? ")
color = raw_input("What is your favorite color? ")

print "Ah, so your name is %s, your quest is %s, " \
"and your favorite color is %s." % (name, quest, color)
output- 
What is your name? Brian
What is your quest? To code
What is your favorite color? Blue
Ah, so your name is Brian, your quest is To code, and your favorite color is Blue.

The datetime Library-
from datetime import datetime
now = datetime.now()
year = now.year
month = now.month
day = now.day
print now
print now.year
print now.month
print now.day
output- 
2018-07-28 08:10:52.315360
2018
7
28

To change the way the date is displayed:
from datetime import datetime
now = datetime.now()

print '%02d-%02d-%04d' % (now.month, now.day, now.year)
# will print the current date as mm-dd-yyyy

For time display change:
from datetime import datetime
now = datetime.now()

print '%02d:%02d:%02d' % (now.hour, now.minute, now.second)
output- 08:17:21

combine the 2:
from datetime import datetime
now = datetime.now()

print '%02d/%02d/%04d' % (now.month, now.day, now.year)
print '%02d:%02d:%02d' % (now.hour, now.minute, now.second)

In one line:
from datetime import datetime
now = datetime.now()

print '%02d/%02d/%04d %02d:%02d:%02d' % (now.month, now.day, now.year, now.hour, now.minute, now.second)
output- 07/28/2018 08:21:01




































