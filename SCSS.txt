SASS Stylesheet

Syntactically Awesome StyleSheets
In terminal sass main.scss main.css takes the input main.scss and places it in the output main.css

Nesting- the process of placing selectors inside the scope of another selector. The scope of the selector is any code inside the {} where it is defined and available to use. 

SCSS:
.parent {
  color: blue;
  .child {
    font-size: 12px;
  }
}

CSS:
.parent {
  color: blue;
}

.parent .child {
    font-size: 12px;
}

SCSS, allows nesting, to see a clear DOM relationship between 2 selectors while also removing the repetition in CSS. 

SCSS (:) appends name such as:
.parent {
  font : {
    family: Roboto, sans-serif;
    size: 12px;
    decoration: none;
  }
}

in CSS then it is:
.parent {
  font-family: Roboto, sans-serif;
  font-size: 12px;
  font-decoration: none;
}

Variables in SASS- allow you to assign an identifier of your choice to a specific value. You can make a change in one place and it will update the change in multiple rules. In SASS ($) is used to define and reference a variable. 
	Different data types you can assign a variable in CSS
	1. Numbers (4.11, 12, 10px, etc...) the numbers are selected
	2. String of text (word, "word", 'word')
	3. Booleans / True / False
	4. null, or empty value
	5. Color
	6. Lists are separated by spaces or commas
	7. (Lists made up of lists)
	8. Maps (key1: value1, key2: value2); have key value pair

In CSS a pseudo-element is used to style parts of an element
-Styling the content ::before or ::after the content of an element
-Using a pseudo class such as :hover to set the properties of an element when the user's mouse is touching the area of the element. 
In SCSS the & character is used to specify exactly where a parent selector should be inserted. 
SCSS: .notecard{ 
  &:hover{
      @include transform (rotatey(-180deg));  
    }
  }
CSS: .notecard:hover {
  transform: rotatey(-180deg);
}

SASS Mixin- lets you make groups of CSS declaration that you want to reuse throughout your site. 
@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

SCSS code: .notecard {
.front, .back {
    width: 100%;
    height: 100%;
    position: absolute;

    @include backface-visibility;
  }
}
CSS code:.notecard .front, .notecard .back {
  width: 100%;
  height: 100%;
  position: absolute;

   backface-visibility: hidden;
  -webkit-backface-visibility: hidden; 
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}


@include backface-visibility; is a vendor specific property that is perfect for mimicking an index card with a front and a back.

Mixins have the ability to take in a value. An argument or parameter is a value passed to the mixin that will be used inside the mixin, such as $visibility in 
@mixin backface-visibility($visibility) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}
You should only ever use a mixin if it takes an arguement. The syntax to pass in a value is:
@include backface-visibility(hidden);
The code hidden is passed in to the backface-visibility mixin where it will be assigned as the value of its arguement $visibility.

Mixin arguements can be assigned a default value in the mixin definition by using a special notation. A default value is assigned to the arguement if no value is passed in when the mixin is included. Defining a default value for each arguement is optional
EX:
@mixin backface-visibility($visibility: hidden) {
   backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}
If no value is passed in when backface-visibility is included, hidden would be assigned to all properties.

1. Mixins can take multiple arguments.
2. Sass allows you to explicitly define each argument in your @include statement.
3. When values are explicitly specified you can send them out of order.
4. If a mixin definition has a combination of arguments with and without a default value, you should define the ones with no default value first.
5. Mixins can be nested.
EX of the rules:
@mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}

span { //only passes non-default argument
    @include dashed-border(3px);
}

p { //passes both arguments
    @include dashed-border(3px, green);
}

div { //passes out of order but explicitly defined
   @include dashed-border(color: purple, width: 5px); 
}
The color of the border of span elements would be white, the border of paragraph elements would be green, while the div elements would have a thicker purple border.

String Interpolation- the process of placing a variable string in the middle of 2 other strings. In a mixin context, interpolation is handy when you want to make use of variables in selectors or file names.
EX:
@mixin photo-content($file) {
  content: url(#{$file}.jpg); //string interpolation
  object-fit: cover;
}

//....

.photo { 
  @include photo-content('titanosaur');
  width: 60%;
  margin: 0px auto; 
  }
Enables in CSS:
.photo { 
  content: url(titanosaur.jpg);
  width: 60%;
  margin: 0px auto; 
}

The & selector in SASS gets assigned the value of the parent at the point where the mixin is included. If there is no parent selector then the value is null and SASS will throw an error. 
EX:
@mixin text-hover($color){
  &:hover {
      color: $color; 
  }
}
The value of the parent selector will be assigned based on the parent at the point where it is invoked. 
  .word { //SCSS: 
    display: block; 
    text-align: center;
    position: relative;
    top: 40%;
    @include text-hover(red);
  }
Will compile in CSS to:
 .word{ 
    display: block;
    text-align: center;
    position: relative;
    top: 40%;
  }
  .word:hover{
    color: red;
  }
The mixin inherited the parent selector .word because that was the parent at the point where the mixin was included. 

To make an on click event: 
&:active {
  	@include transform (rotatey(-180deg));  
	}	

SASS alpha, command: fade-out makes a color more transparent by taking a number between 0 and 1 and decreasing opacity (the alpha channel) by that amount. 
EX: 
 $color: rgba(39, 39, 39, 0.5);
   $amount: 0.1;
   $color2: fade-out($color, $amount);//rgba(39, 39, 39, 0.4)
Fade-in changes a color by increasing its opacity
$color: rgba(55,7,56, 0.5);
$amount: 0.1;
$color2: fade-in($color, $amount); //rgba(55,7,56, 0.6)
The function adjust-hue($color, $degrees) changes the hue of a color by taking color and a number of degrees (usually between -360 degrees and 360 degrees), and rotate the color wheel by that amount.

The Sass arithmetic operations are:
addition +
subtraction -
multiplication *
division /, and
modulo %.
Note: Modulo, or %, is the remainder in a given division, so "9%2" would be "1".
You can do math with SASS colors to mix them. Requires compatable units, so you can't multiply px with ems. 




















